<html>
<head>
  <title></title>
   
   <link rel="stylesheet" type="text/css" href="Style1.css">
   <link rel="stylesheet" type="text/css" href="Text.css">
   <link rel="SHORTCUT ICON" href="prim/pick.gif" >

 <style>
body {
   background: url(prim/fon.png);
   -moz-background-size: 100%;
   -webkit-background-size: 100%;
   -o-background-size: 100%;
    background-size: 100%;
</style> 
</head>


<body>
  <div class="form">
	<div class="container">
		<h4><i>
      <table class="raz">
  <tr>
    <td><a href="">____________________</a>
    <td><a href="Java11.php">На главную</a>
    <td><a href="">____________________</a>
  </tr>
</table>
                                                      <hr/><p align="center"><big>1 Типы данных и переменные в JavaScript</big></p><hr/>

<p style="text-indent:20px">Компьютеры обрабатывают информацию — данные. Данные могут быть представлены в различных формах или типах. Большая часть функциональности JavaScript реализуется за счет простого набора объектов и типов данных. Функциональные возможности, связанные со строками, числами и логикой, базируются на строковых, числовых и логических типах данных. Другая функциональная возможность, включающая регулярные выражения, даты и математические операции, осуществляется с помощью объектов RegExp, Date и Math.

<p style="text-indent:20px">Литералы в JavaScript представляют собой особый класс типа данных, фиксированные значения одного из трех типов данных — строкового, числового или логического:<br><br>

<span class="letter">"это строка" <br>
3.14<br>
true<br>
alert("Hellow"); // "Hellow" - это литерал<br>
var myVariable = 15; // 15 - это литерал<br></span>
<br>
Примитивный тип данных является экземпляром определенного типа данных, таких как строковый, числовой, логический, null и undefined.<br>

                                                         <hr/><p align="center"><big>1.1. Переменные в JavaScript</big></p><hr/>

<p style="text-indent:20px">Данные, обрабатываемые сценарием JavaScript, являются переменными. Переменные представляют собой именованные контейнеры, хранящие данные (значения) в памяти компьютера, которые могут изменяться в процессе выполнения программы. Переменные имеют имя, тип и значение.

<p style="text-indent:20px">Имя переменной, или идентификатор, может включать только буквы a-z, A-Z, цифры 0-9 (цифра не может быть первой в имени переменной), символ $ (может быть только первым символом в имени переменной или функции) и символ подчеркивания _, наличие пробелов не допускается. Длина имени переменной не ограничена. Можно, но не рекомендуется записывать имена переменных буквами русского алфавита, для этого они должны быть записаны в Unicode.

<p style="text-indent:20px">В качестве имени переменной нельзя использовать ключевые слова JavaScript. Имена переменных в JavaScript чувствительные к регистру, что означает, что переменная var message; и var Message; — разные переменные.

<p style="text-indent:20px">Переменная создается (объявляется) с помощью ключевого слова var, за которым следует имя переменной, например, var message;. Объявлять переменную необходимо перед ее использованием.

<p style="text-indent:20px">Переменная инициализируется значением с помощью операции присваивания =, например, var message="Hellow";, т.е. создается переменная message и в ней сохраняется ее первоначальное значение "Hellow". Переменную можно объявлять без значения, в этом случае ей присваивается значение по умолчанию undefined. Значение переменной может изменяться во время исполнения скрипта. Разные переменные можно объявлять в одной строке, разделив их запятой:


 
<span class="letter">var message="Hellow", number_msg = 6, time_msg = 50;<br></span>
<br>

                                                         <hr/><p align="center"><big>1.2. Типы данных переменных</big></p><hr/>

<p style="text-indent:20px">JavaScript является нетипизированным языком, тип данных для конкретной переменной при ее объявлении указывать не нужно. Тип данных переменной зависит от значений, которые она принимает. Тип переменной может изменяться в процессе совершения операций с данными (динамическое приведение типов). Преобразование типов выполняется автоматически в зависимости от того, в каком контексте они используются. Например, в выражениях, включающих числовые и строковые значения с оператором +, JavaScript преобразует числовые значения в строковые:

var message = 10 + " дней до отпуска"; // вернет "10 дней до отпуска"

<p style="text-indent:20px">Получить тип данных, который имеет переменная, можно с помощью оператора typeof. Этот оператор возвращает строку, которая идентифицирует соответствующий тип.<br><br>

<span class="letter">typeof 35; // вернет "number"<br>
typeof "text"; // вернет "string"<br>
typeof true; // вернет "boolean"<br>
typeof [1, 2, 4]; // вернет "object"<br>
typeof undefined; // вернет "undefined"<br>
typeof null; // вернет "object"</span>

<p style="text-indent:20px">Все типы данных в JavaScript делятся на две группы — простые типы данных (primitive data types) и составные типы данных (composite data types).

<p style="text-indent:20px">К простым типам данных относят строковый, числовой, логический, null и underfined.

                                                            <hr/><p align="center"><big>1.2.1. Строковый тип (string)</big></p><hr/>

<p style="text-indent:20px">Используется для хранения строки символов, заключенных в двойные или одинарные кавычки. Пустой набор символов, заключенный в одинарные или двойные кавычки, является пустой строкой. Число, заключенное в кавычки, также является строкой.<br><br>

<span class="letter">var money = ""; // пустая строка, ноль символов<br>
var work = 'test';<br>
var day = "Sunday";<br>
var x = "150";</span>

<p style="text-indent:20px">В строку в двойных кавычках можно включить одиночную кавычку и наоборот. Кавычка того же типа отключается с помощью символа обратного слэша \ (так называемая escape-последовательность):<br><br>

<span class="letter">document.writeln("\"Доброе утро, Иван Иваныч!\"\n"); // выведет на экран "Доброе утро, Иван Иваныч!"</span>

<p style="text-indent:20px">Строки можно сравнивать, а также объединять с помощью операции конкатенации +. Благодаря автоматическому приведению типов можно объединять числа и строки. Строки являются постоянными, после того, как строка создана, она не может быть изменена, но может быть создана новая строка путем объединения других строк.

                                                                <hr/><p align="center"><big>1.2.2. Числовой тип (number)</big></p><hr/>

<p style="text-indent:20px">Используется для числовых значений. Числа в языке JavaScript бывают двух типов: целые числа (integer) и числа с плавающей точкой (floating-point number). Целочисленные величины могут быть положительными, например 1, 2, и отрицательными, например –1, –2, или равными нулю. 1 и 1.0 — одно и то же значение. Большинство чисел в JavaScript записываются в десятичной системе счисления, также может использоваться восьмеричная и шестнадцатеричная системы.

<p style="text-indent:20px">В десятичной системе значения числовых переменных задаются с использованием арабских цифр 1, 2, 3, 4, 5, 6, 7, 8, 9, 0.

<p style="text-indent:20px">В восьмеричном формате числа представляет собой последовательность, содержащая цифры от 0 до 7 и начинающаяся с префикса 0.

<p style="text-indent:20px">Для шестнадцатеричного формата добавляется префикс 0x (0X), за которым следует последовательность из цифр от 0 до 9 или букв от a (A) до f (F), соответствующие значениям от 10 до 15.<br><br>

<span class="letter">var a = 120; // целое десятичное числовое значение<br>
var b = 012; // восьмеричный формат<br>
var c = 0xfff; // шестнадцатеричный формат<br>
var d = 0xACFE12; // шестнадцатеричный формат</span>

<p style="text-indent:20px">Числа с плавающей точкой представляют собой числа с дробной десятичной частью, либо это числа, выраженные в экспоненциальном виде. Экспоненциальная запись чисел предполагает следующий вид: число с дробной десятичной частью, за ним следует буква e, которая может быть указана как в верхнем, так и в нижнем регистре, далее — необязательный знак + или - и целая экспонента.<br><br>

<span class="letter">var a = 6.24; // вещественное число<br>
var b = 1.234E+2; // вещественное число, эквивалентно 1.234 Х 10²<br>
var c = 6.1e-2; // вещественное число, эквивалентно 6.1 Х 10‾²<br></span>

                                                                <hr/><p align="center"><big>2.2.3. Логический тип (boolean)</big></p><hr/>

<p style="text-indent:20px">Данный тип имеет два значения, true (истина), false (ложь). Используется для сравнения и проверки условий.<br><br>

<span class="letter">var answer = confirm("Вам понравилась эта статья?\n Нажмите ОК. Если нет, то нажмите Cancel.");<br>
if (answer == true)<br>
{<br>
alert("Спасибо!");<br>
}</span>

<p style="text-indent:20px">Также существуют специальные типы простых значений:
нулевой тип — данный тип имеет одно значение null, которое используется для представления несуществующих объектов.

<p style="text-indent:20px">неопределенный тип — тип переменной underfined означает отсутствие первоначального значения переменной, а также несуществующее свойство объекта.

<p style="text-indent:20px">Составные типы данных состоят из более чем одного значения. К ним относятся объекты и особые типы объектов — массивы и функции. Объекты содержат свойства и методы, массивы представляют собой индексированный набор элементов, а функции состоят из коллекции инструкций.

                                                                <hr/><p align="center"><big>2.3. Глобальные и локальные переменные</big></p><hr/>

<p style="text-indent:20px">Переменные по области видимости делятся на глобальные и локальные. Область видимости представляет собой часть сценария, в пределах которой имя переменной связано с этой переменной и возвращает ее значение. Переменные, объявленные внутри тела функции, называются локальными, их можно использовать только в этой функции. Локальные переменные создаются и уничтожаются вместе с соответствующей функцией.

<p style="text-indent:20px">Переменные, объявленные внутри элемента <.script>, или внутри функции, но без использования ключевого слова var, называются глобальными. Доступ к ним может осуществляться на протяжении всего времени, пока страница загружена в браузере. Такие переменные могут использоваться всеми функциями, позволяя им обмениваться данными.

<p style="text-indent:20px">Глобальные переменные попадают в глобальное пространство имен, которое является местом взаимодействия отдельных компонентов программы. Не рекомендуется объявлять переменные таким способом, так как аналогичные имена переменных уже могут использоваться любым другим кодом, вызывая сбой в работе скрипта.

<p style="text-indent:20px">Глобальное пространство в JavaScript представляется глобальным объектом window. Добавление или изменение глобальных переменных автоматически обновляет глобальный объект. В свою очередь, обновление глобального объекта автоматически приводит к обновлению глобального пространства имен.

<p style="text-indent:20px">Если глобальная и локальная переменная имеют одинаковые имена, то локальная переменная будет иметь преимущество перед глобальной.

<p style="text-indent:20px">Локальные переменные, объявленные внутри функции в разных блоках кода, имеют одинаковые области видимости. Тем не менее, рекомендуется помещать объявления всех переменных в начале функции.

		<h4><i>
  <table class="raz">
  <tr>
    <td><a href="ja1.php"><img border="0" width="100" height="50" src="prim/поворот2.png" >  </a>
    <td><a href="Java11.php">На главную</a>
    <td><a href="ja3.php"><img border="0" width="100" height="50" src="prim/поворот1.png" >  </a>
  </tr>
</table>